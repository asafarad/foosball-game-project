

module game_controller (
					input		logic	CLK,
					input		logic	RESETn,
					input		logic	b_drawing_request,
					input		logic	p1_drawing_request,
					input		logic	p2_drawing_request,
					//input		logic [10:0] ball_coordX,
					//input		logic [10:0] ball_coordY,
					output collision
					//output  vert_coll, //vertical collision with the wall
					//output  hor_coll	//horizonal collision with the wall
);

//enum logic [2:0] {IDLE} cur_state, nxt_state;
		
const int	x_frame	=	639;
const int	y_frame	=	479;
		
always_ff@(posedge CLK or negedge RESETn)
begin
		if(!RESETn) begin
			collision <= 0;
			//hor_coll <= 0;
			//vert_coll <= 0;
		end
		
		else begin
			//if (ball_coordY <= 5 || ball_coordY >= y_frame - 30) //if collision with the top or bottom border 
				//hor_coll <= 1;
			//else if (ball_coordX <= 4 || ball_coordX >= x_frame - 31) //if collision with the left or right border 
				//vert_coll <= 1;
			if ( b_drawing_request && p1_drawing_request) 
				collision <= 1;
			else if ( b_drawing_request && p2_drawing_request)
				collision <= 1;
			else 
				collision <= 0;
				//hor_coll <= 0;
				//vert_coll <= 0;
		end
end


/*always_comb
begin
	//default values
	nxt_state = cur_state;
	
	case (cur_state)
	
		IDLE: begin
			collision = 0;
			hor_coll = 0;
			vert_coll = 0;
		
	*/
			
			

endmodule
	
					
					